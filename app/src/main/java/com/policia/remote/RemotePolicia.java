package com.policia.remote;import android.annotation.TargetApi;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.os.AsyncTask;import android.os.Build;import android.support.v4.app.Fragment;import android.widget.ImageView;import android.widget.ListView;import android.widget.Toast;import com.google.gson.Gson;import com.policia.codigopolicia.IdentificacionPolicia.Fragment_Identificacion;import com.policia.codigopolicia.IdentificacionPolicia.IdentificacionAdapter;import com.policia.codigopolicia.R;import com.policia.codigopolicia.parser.DocumentoPolicia;import com.policia.movil.Almacenamiento;import com.policia.movil.FormatoImagen;import com.policia.negocio.modelo.ValuePar;import com.policia.negocio.seguridad.Seguridad;import com.policia.remote.response.CONSULTAPOLICIAResponse;import com.policia.remote.response.CONSULTAPOLICIAResult;import org.beyka.tiffbitmapfactory.TiffBitmapFactory;import org.json.JSONException;import org.json.XML;import java.io.ByteArrayInputStream;import java.io.File;import java.util.ArrayList;/** * Created by 1085253556 on 29/12/2017. */public class RemotePolicia extends AsyncTask<Void, Void, RemotePolicia.MotivoErrorLectura> {    private String barcode;    private Fragment fragment;    private ListView listView;    private DocumentoPolicia document;    private CONSULTAPOLICIAResponse consulta;    private Seguridad seguridad;    protected Fragment_Identificacion.IDisparadorLectura lectura;    private static RemotePolicia remotePolicia;    private RemotePolicia(Fragment fragment, ListView listView, String barcode, Fragment_Identificacion.IDisparadorLectura lectura) throws Exception {        this.barcode = barcode;        this.fragment = fragment;        this.listView = listView;        this.lectura = lectura;        this.seguridad = Seguridad.Sesion(fragment.getContext());    }    public static RemotePolicia newInstance(Fragment fragment, ListView listView, String barcode, Fragment_Identificacion.IDisparadorLectura lectura) throws Exception {        if (remotePolicia == null)            remotePolicia = new RemotePolicia(fragment, listView, barcode, lectura);        return remotePolicia;    }    @Override    protected RemotePolicia.MotivoErrorLectura doInBackground(Void... voids) {        try {            document = new Gson().fromJson(String.valueOf(XML.toJSONObject(barcode)), DocumentoPolicia.class);            if (document.getDocumentElement() == null)                throw new JSONException("No se reconoce documento de policia");            consulta = RemoteClient.connect(fragment.getContext()).identificacionPolicia(                    String.valueOf(document.getDocumentElement().getTable().getE21()),                    String.valueOf(document.getDocumentElement().getTable().getE2()),                    seguridad.getUsuario().equals("1") ? "0" : "1");            if (consulta == null)                return MotivoErrorLectura.NULO;            return MotivoErrorLectura.NINGUNO;        } catch (JSONException e) {            e.printStackTrace();            return MotivoErrorLectura.TRAMA;        } catch (Exception e) {            e.printStackTrace();            return MotivoErrorLectura.INTERNET;        }    }    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)    @Override    protected void onPostExecute(RemotePolicia.MotivoErrorLectura error) {        try {            lectura.realizarLectura(error);            ArrayList<ValuePar> valores = new ArrayList<ValuePar>();            if (MotivoErrorLectura.INTERNET == error) {                Toast.makeText(fragment.getActivity(), "Para identificar al policía se necesita una conexión a internet", Toast.LENGTH_SHORT).show();            } else if (MotivoErrorLectura.TRAMA == error) {                Toast.makeText(fragment.getActivity(), "El documento que está leyendo no corresponde con un carnet vigente", Toast.LENGTH_SHORT).show();            } else if (MotivoErrorLectura.NULO == error) {                Toast.makeText(fragment.getActivity(), "El servicio de identifiación de la Policía Nacional de Colombia no está disponible en este momento", Toast.LENGTH_SHORT).show();            } else {                for (CONSULTAPOLICIAResult identificacion : consulta.cONSULTAPOLICIAResult) {                    if (seguridad.getUsuario().equals("1")) {//es ciudadano                        valores.add(new ValuePar("", identificacion.mensaje));                        //valores.add(new ValuePar("CEDULA", String.valueOf(document.getDocumentElement().getTable().getE2())));                        valores.add(new ValuePar("APELLIDO", String.valueOf(document.getDocumentElement().getTable().getE4())));                        valores.add(new ValuePar("NOMBRE", String.valueOf(document.getDocumentElement().getTable().getE5())));                        //valores.add(new ValuePar("GRADO", String.valueOf(document.getDocumentElement().getTable().getE11())));                        valores.add(new ValuePar("CARNET", String.valueOf(document.getDocumentElement().getTable().getE15())));                        //listView.addHeaderView(fragment.getLayoutInflater().inflate(R.layout.policia_identificacion_header, null), null, false);                    } else {//es policia                        valores.add(new ValuePar("ESTADO", identificacion.estado));                        valores.add(new ValuePar("UNIDAD", identificacion.unidad));                        valores.add(new ValuePar("CEDULA", String.valueOf(document.getDocumentElement().getTable().getE2())));                        valores.add(new ValuePar("APELLIDO", String.valueOf(document.getDocumentElement().getTable().getE4())));                        valores.add(new ValuePar("NOMBRE", String.valueOf(document.getDocumentElement().getTable().getE5())));                        valores.add(new ValuePar("GRADO", String.valueOf(document.getDocumentElement().getTable().getE11())));                        valores.add(new ValuePar("CARNET", String.valueOf(document.getDocumentElement().getTable().getE15())));                    }                    listView.setAdapter(new IdentificacionAdapter(fragment, valores));                    ImageView image = fragment.getView().findViewById(R.id.imageViewCaricatura);                    ByteArrayInputStream imageStream = new ByteArrayInputStream(identificacion.imagen);                    FormatoImagen.Formato formato = FormatoImagen.compararFormato(identificacion.imagen);                    if (formato.equals(FormatoImagen.Formato.Unknown)) {                        image.setImageBitmap(convertirImagen(identificacion.imagen, "prueba.tiff", 100, 100));                    } else {                        image.setImageBitmap(BitmapFactory.decodeStream(imageStream));                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }        remotePolicia = null;        super.onPostExecute(error);    }    private Bitmap convertirImagen(byte[] bytes, String archivoNombre, int reqHeight, int reqWidth) {        String nombreImagen = Almacenamiento.newInstance(fragment.getContext()).guardarImagen(bytes, archivoNombre);        File file = new File(nombreImagen);        //Read data about image to Options object        TiffBitmapFactory.Options options = new TiffBitmapFactory.Options();        options.inJustDecodeBounds = true;        TiffBitmapFactory.decodeFile(file, options);        int dirCount = options.outDirectoryCount;        //Read and process all images in file        for (int i = 0; i < dirCount; i++) {            options.inDirectoryNumber = i;            TiffBitmapFactory.decodeFile(file, options);            int curDir = options.outCurDirectoryNumber;            int width = options.outWidth;            int height = options.outHeight;            //Change sample size if width or height bigger than required width or height            int inSampleSize = 1;            if (height > reqHeight || width > reqWidth) {                final int halfHeight = height / 2;                final int halfWidth = width / 2;                // Calculate the largest inSampleSize value that is a power of 2 and keeps both                // height and width larger than the requested height and width.                while ((halfHeight / inSampleSize) > reqHeight                        && (halfWidth / inSampleSize) > reqWidth) {                    inSampleSize *= 2;                }            }            options.inJustDecodeBounds = false;            options.inSampleSize = inSampleSize;            // Specify the amount of memory available for the final bitmap and temporary storage.            options.inAvailableMemory = 20000000; // bytes            //Bitmap bmp = TiffBitmapFactory.decodeFile(file, options);            //processBitmap(bmp);        }        return TiffBitmapFactory.decodeFile(file, options);    }    public enum MotivoErrorLectura {        TRAMA,        INTERNET,        NINGUNO,        NULO;    }}